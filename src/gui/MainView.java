/*********************************************************************
 *
 *  TodoListManager - Open-source Managing of todo lists
 *
 *  Copyright (C) 2019
 *
 *  This file is part of TodoListManager.
 *
 *  TodoListManager is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  TodoListManager is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Treeler.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Contact: Lluís Alemany Puig (lluis.alemany.puig@gmail.com)
 *
 ********************************************************************/

package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.Timer;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeSelectionModel;

import todomanager.task.*;
import todomanager.util.Logger;

/**
 * @brief Main class: the only file that defines the Graphical User Interface.
 * @author Lluís Alemany Puig
 */
public class MainView extends javax.swing.JFrame {

	/**
	 * Creates new form MainView
	 */
	public MainView() {
		log = Logger.get_instance();
		log.begin();
		
		initComponents();
		
		tree_model = (DefaultTreeModel) (Tree_Task.getModel());
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) tree_model.getRoot();
		high_prior_node = (DefaultMutableTreeNode) root.getChildAt(0);
		med_prior_node = (DefaultMutableTreeNode) root.getChildAt(1);
		low_prior_node = (DefaultMutableTreeNode) root.getChildAt(2);
		
		Tree_Task.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		
		CustomTreeCellRenderer renderer = new CustomTreeCellRenderer(14);
		Tree_Task.setCellRenderer(renderer);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new JPanel();
        jScrollPane6 = new JScrollPane();
        Tree_Task = new JTree();
        jPanel2 = new JPanel();
        Button_RemoveTask = new JButton();
        Button_NewTask = new JButton();
        Button_TaskDown = new JButton();
        Button_TaskUp = new JButton();
        Button_IncrPriority = new JButton();
        Button_DecrPriority = new JButton();
        Button_OverwriteTasks = new JButton();
        Button_SaveTasksAs = new JButton();
        Button_ExpandAll = new JButton();
        Button_ContractAll = new JButton();
        jPanel7 = new JPanel();
        jPanel5 = new JPanel();
        Button_TaskWorking = new JButton();
        Button_TaskCancel = new JButton();
        Button_TaskDone = new JButton();
        Button_TaskDelete = new JButton();
        Button_TaskOnRevision = new JButton();
        Button_TaskHold = new JButton();
        Button_TaskPendingRevision = new JButton();
        Button_SaveTaskChanges = new JButton();
        Button_Clear = new JButton();
        jPanel1 = new JPanel();
        Label_TaskState = new JLabel();
        TextBox_TaskDate = new JTextField();
        Label_TaskID = new JLabel();
        TextBox_TaskName = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jScrollPane1 = new JScrollPane();
        TextArea_TaskChanges = new JTextArea();
        jLabel3 = new JLabel();
        jLabel6 = new JLabel();
        jScrollPane7 = new JScrollPane();
        TextArea_TaskDescription = new JTextArea();
        jLabel4 = new JLabel();
        TextBox_Error = new JTextField();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        MenuItem_OpenFile = new JMenuItem();
        MenuItem_About = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Todo List Manager");
        setResizable(false);

        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("Tasks");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("High Priority");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Medium Priority");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Low Priority");
        treeNode1.add(treeNode2);
        Tree_Task.setModel(new DefaultTreeModel(treeNode1));
        Tree_Task.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                Tree_TaskValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Tree_Task);

        Button_RemoveTask.setText("Remove");
        Button_RemoveTask.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_RemoveTaskMouseClicked(evt);
            }
        });

        Button_NewTask.setText("New Task");
        Button_NewTask.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_NewTaskMouseClicked(evt);
            }
        });

        Button_TaskDown.setText("Down");
        Button_TaskDown.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskDownMouseClicked(evt);
            }
        });

        Button_TaskUp.setText("Up");
        Button_TaskUp.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskUpMouseClicked(evt);
            }
        });

        Button_IncrPriority.setText("+ Priority");
        Button_IncrPriority.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_IncrPriorityMouseClicked(evt);
            }
        });

        Button_DecrPriority.setText("- Priority");
        Button_DecrPriority.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_DecrPriorityMouseClicked(evt);
            }
        });

        Button_OverwriteTasks.setText("Overwrite");
        Button_OverwriteTasks.setEnabled(false);
        Button_OverwriteTasks.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_OverwriteTasksMouseClicked(evt);
            }
        });

        Button_SaveTasksAs.setText("Save As");
        Button_SaveTasksAs.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_SaveTasksAsMouseClicked(evt);
            }
        });

        Button_ExpandAll.setText("Show all");
        Button_ExpandAll.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_ExpandAllMouseClicked(evt);
            }
        });

        Button_ContractAll.setText("Hide all");
        Button_ContractAll.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_ContractAllMouseClicked(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Button_ExpandAll, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(Button_NewTask, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(Button_RemoveTask, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Button_TaskDown, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_DecrPriority, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Button_TaskUp, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_IncrPriority, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(Button_OverwriteTasks, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(Button_SaveTasksAs, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Button_ContractAll, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_NewTask)
                    .addComponent(Button_IncrPriority)
                    .addComponent(Button_TaskUp)
                    .addComponent(Button_OverwriteTasks))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_TaskDown)
                    .addComponent(Button_DecrPriority)
                    .addComponent(Button_RemoveTask)
                    .addComponent(Button_SaveTasksAs))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_ExpandAll)
                    .addComponent(Button_ContractAll))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane6, GroupLayout.PREFERRED_SIZE, 400, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, GroupLayout.PREFERRED_SIZE, 617, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Button_TaskWorking.setText("Working");
        Button_TaskWorking.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskWorkingMouseClicked(evt);
            }
        });

        Button_TaskCancel.setText("Cancel");
        Button_TaskCancel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskCancelMouseClicked(evt);
            }
        });

        Button_TaskDone.setText("Done");
        Button_TaskDone.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskDoneMouseClicked(evt);
            }
        });

        Button_TaskDelete.setText("Delete");
        Button_TaskDelete.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskDeleteMouseClicked(evt);
            }
        });

        Button_TaskOnRevision.setText("On revision");
        Button_TaskOnRevision.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskOnRevisionMouseClicked(evt);
            }
        });

        Button_TaskHold.setText("Put on Hold");
        Button_TaskHold.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskHoldMouseClicked(evt);
            }
        });

        Button_TaskPendingRevision.setText("Pending revision");
        Button_TaskPendingRevision.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_TaskPendingRevisionMouseClicked(evt);
            }
        });

        Button_SaveTaskChanges.setText("Save Changes");
        Button_SaveTaskChanges.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_SaveTaskChangesMouseClicked(evt);
            }
        });

        Button_Clear.setText("Clear");
        Button_Clear.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Button_ClearMouseClicked(evt);
            }
        });

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(Button_TaskWorking, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_TaskDone, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_TaskHold, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(Button_TaskPendingRevision, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_TaskOnRevision, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_SaveTaskChanges, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(Button_TaskCancel, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_TaskDelete, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_Clear, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_TaskDone)
                    .addComponent(Button_TaskOnRevision)
                    .addComponent(Button_TaskCancel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_TaskPendingRevision)
                    .addComponent(Button_TaskDelete)
                    .addComponent(Button_TaskWorking))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_TaskHold)
                    .addComponent(Button_SaveTaskChanges)
                    .addComponent(Button_Clear))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Label_TaskState.setHorizontalAlignment(SwingConstants.CENTER);
        Label_TaskState.setText("-");

        TextBox_TaskDate.setEditable(false);

        Label_TaskID.setHorizontalAlignment(SwingConstants.CENTER);
        Label_TaskID.setText("000000");

        jLabel1.setText("Name");

        jLabel2.setText("Date");

        TextArea_TaskChanges.setEditable(false);
        TextArea_TaskChanges.setColumns(20);
        TextArea_TaskChanges.setLineWrap(true);
        TextArea_TaskChanges.setRows(5);
        jScrollPane1.setViewportView(TextArea_TaskChanges);

        jLabel3.setText("Description");

        jLabel6.setText("id:");

        TextArea_TaskDescription.setColumns(20);
        TextArea_TaskDescription.setLineWrap(true);
        TextArea_TaskDescription.setRows(5);
        jScrollPane7.setViewportView(TextArea_TaskDescription);

        jLabel4.setText("History");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(TextBox_TaskName)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Label_TaskID, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(TextBox_TaskDate)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Label_TaskState, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(TextBox_TaskName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_TaskID)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(TextBox_TaskDate, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(Label_TaskState, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane7))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 332, GroupLayout.PREFERRED_SIZE)))
        );

        GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        MenuItem_OpenFile.setText("Open");
        MenuItem_OpenFile.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                MenuItem_OpenFileMousePressed(evt);
            }
        });
        jMenu1.add(MenuItem_OpenFile);

        MenuItem_About.setText("About");
        MenuItem_About.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                MenuItem_AboutMousePressed(evt);
            }
        });
        jMenu1.add(MenuItem_About);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(TextBox_Error)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextBox_Error, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void setNodeExpandedState(DefaultMutableTreeNode node, boolean expanded) {
		ArrayList<DefaultMutableTreeNode> list = Collections.list(node.children());
		for (DefaultMutableTreeNode treeNode : list) {
			setNodeExpandedState(treeNode, expanded);
		}
		if (!expanded && node.isRoot()) {
			return;
		}
		TreePath path = new TreePath(node.getPath());
		if (expanded) {
			Tree_Task.expandPath(path);
		}
		else {
			Tree_Task.collapsePath(path);
		}
	}
	
	private void set_tree_expanded_state(boolean expanded) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) Tree_Task.getModel().getRoot();
		setNodeExpandedState(node, expanded);
	}
	
	private void clear_TextBox_Error(int millis) {
		Timer t = new Timer(millis, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TextBox_Error.setText(null);
            }
        });
        t.setRepeats(false);
        t.start();
	}
	
	private void issue_error_msg(String msg) {
		TextBox_Error.setText("Error: " + msg);
		log.error(msg);
		clear_TextBox_Error(20000);
	}
	
	private void issue_warning_msg(String msg) {
		TextBox_Error.setText("Warning: " + msg);
		log.warning(msg);
		clear_TextBox_Error(10000);
	}
	
	private String get_priority(DefaultMutableTreeNode n) {
		if (high_prior_node.isNodeDescendant(n)) { return "high"; }
		else if (med_prior_node.isNodeDescendant(n)) { return "med"; }
		else if (low_prior_node.isNodeDescendant(n)) { return "low"; }
		issue_error_msg("Could not determine priority of node");
		return "?";
	}
	
	private void refresh_boxes_task(Task t) {
		TextBox_TaskName.setText(t.get_name());
		Label_TaskID.setText(t.get_id());
		Label_TaskState.setText(t.current_state().get_state().toString());
		TextBox_TaskDate.setText(t.get_pretty_date());
		TextArea_TaskDescription.setText(t.get_description());
		TextArea_TaskChanges.setText(t.changes_to_string());
	}
	
	private void clear_boxes_task() {
		TextArea_TaskDescription.setText("");
		Label_TaskID.setText("000000");
		Label_TaskState.setText("-");
		TextArea_TaskChanges.setText("");
		TextBox_TaskName.setText("");
		TextBox_TaskDate.setText("");
	}
	
	private boolean tree_has_selection(String msg) {
		if (Tree_Task.getSelectionCount() == 0) {
			issue_error_msg(msg);
			return false;
		}
		return true;
	}
	
	private boolean tree_has_selection() {
		return Tree_Task.getSelectionCount() > 0;
	}
	
    private void Button_ClearMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_ClearMouseClicked
        clear_boxes_task();
    }//GEN-LAST:event_Button_ClearMouseClicked
	
    private void Tree_TaskValueChanged(TreeSelectionEvent evt) {//GEN-FIRST:event_Tree_TaskValueChanged
        if (!tree_has_selection()) { return; }
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		if (sel.getLevel() <= 1) {
			clear_boxes_task();
			return;
		}
		Task node_task = (Task) sel.getUserObject();
		// fill in the text boxes
		refresh_boxes_task(node_task);
    }//GEN-LAST:event_Tree_TaskValueChanged

    private void Button_RemoveTaskMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_RemoveTaskMouseClicked
		if (!tree_has_selection("A task must be selected in order to delete it")) { return; }
		
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		if (sel.getLevel() <= 1) {
			issue_error_msg("You can't delete the root node or the high/med/low nodes");
			return;
		}
		
		TaskManager tm = TaskManager.get_instance();
		Task node_task = (Task) sel.getUserObject();
		boolean d = tm.delete_task(node_task.get_id());
		if (!d) {
			log.info("Attempted at removing a subtask from the task manager");
			log.info("    Subtasks are never added at the manager");
		}
		
		DefaultMutableTreeNode par_sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		tree_model.removeNodeFromParent(sel);
		tree_model.reload(par_sel);
    }//GEN-LAST:event_Button_RemoveTaskMouseClicked

    private void Button_NewTaskMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_NewTaskMouseClicked
        if (Tree_Task.getSelectionCount() == 0) {
			issue_error_msg("A task can't be added if no category/task is selected");
			return;
		}
		else if (Tree_Task.getSelectionCount() > 1) {
			issue_error_msg("Select only one category/task in order to create a task");
			return;
		}
		
		// find out if the task is high/med/low
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		
		// get data used to identify the task
		String task_name = TextBox_TaskName.getText();
		if (task_name.equals("")) {
			task_name = "Nameless task";
			log.info("No name for new task");
		}
		String task_descr = TextArea_TaskDescription.getText();
		if (task_descr.equals("")) {
			task_descr = "Empty task (yay! nothing to do!)";
			log.info("No description for new task");
		}
		
		// create the task
		TaskManager tm = TaskManager.get_instance();
		Task new_t = tm.new_task(task_name, task_descr);
		
		// the task should only be added to the taks manager's
		// containers if they are children of the "high/med/low" nodes.
		if (sel.getLevel() == 1) {
			String prior = get_priority(sel);
			if (prior.equals("high")) { tm.insert_high_task(0, new_t); }
			else if (prior.equals("med")) { tm.insert_med_task(0, new_t); }
			else if (prior.equals("low")) { tm.insert_low_task(0, new_t); }
			else { return; }
		}
		
		// is this new task a subtask? the selection is a task,
		// so the new task is actually a subtask!
		if (sel.getLevel() > 1) {
			// the task associated to the selected node
			Task node_task = (Task) sel.getUserObject();
			// add the new task as a subtask
			node_task.add_subtask(new_t);
			// change state
			String m = "A subtask was added (id: " + new_t.get_id() + ")";
			node_task.change_state(m, TaskStateEnum.AddedSubtask);
			// fill in the text boxes
			refresh_boxes_task(node_task);
		}
		// make the node so as to show it to the user
		DefaultMutableTreeNode new_node = new DefaultMutableTreeNode(new_t);
		sel.insert(new_node, 0);
		tree_model.reload(sel);
		Tree_Task.expandPath(new TreePath(sel.getPath()));
    }//GEN-LAST:event_Button_NewTaskMouseClicked

    private void Button_OverwriteTasksMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_OverwriteTasksMouseClicked
        log.info("Saving tasks to disk");
		TaskManager tm = TaskManager.get_instance();
		tm.write_tasks(true);
		log.info("Tasks created/edited so far have been saved to disk");
    }//GEN-LAST:event_Button_OverwriteTasksMouseClicked

	private void move_task_up_down(String dir, int incr) {
		if (!tree_has_selection("A task must be selected in order to move it")) { return; }
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		if (sel.getLevel() <= 1) {
			log.info("Can't move root node or nodes high/med/low");
			return;
		}
		
		// the task associated to the node
		Task t = (Task) sel.getUserObject();
		
		log.info("Selected node (task id: '" + t.get_id() + "' has level " + sel.getLevel());
		log.info("    Moving selection '" + dir + "' (by " + incr + ")");
		
		DefaultMutableTreeNode par_sel = (DefaultMutableTreeNode) sel.getParent();
		int idx = par_sel.getIndex(sel);
		if (dir.equals("up") && idx == 0) {
			log.warning("Can't increase priority of the highest-priority subtask");
			return;
		}
		if (dir.equals("down") && idx == par_sel.getChildCount() - 1) {
			log.warning("Can't decrease priority of the lowest-priority subtask");
			return;
		}
		
		log.info("    Selected node is the " + idx + "-th child of its parent");
		
		// move the task inside the task manager
		if (sel.getLevel() == 2) {
			String prior = get_priority(sel);
			log.info("    Moving task of priority '" + prior + "' within the task manager");
			TaskManager tm = TaskManager.get_instance();
			int i;
			if (prior.equals("high")) {
				i = tm.del_high_task(t.get_id());
				tm.insert_high_task(i + incr, t);
			}
			else if (prior.equals("med")) {
				i = tm.del_med_task(t.get_id());
				tm.insert_med_task(i + incr, t);
			}
			else if (prior.equals("low")) {
				i = tm.del_low_task(t.get_id());
				tm.insert_low_task(i + incr, t);
			}
			else { return; }
			log.info("    Moved from position " + (i) + " to position " + (i + incr) + "");
		}
		
		// if the task has a parent, move the subtask
		// within the parent's list of subtasks
		Task parent_task = t.get_parent();
		if (parent_task != null) {
			log.info("    Moving task within the parent task's list of subtasks");
			parent_task.move_subtask_by(t.get_id(), incr);
		}
		
		// move the task in the tree
		tree_model.removeNodeFromParent(sel);
		par_sel.insert(sel, idx + incr);
		
		sel = (DefaultMutableTreeNode) par_sel.getChildAt(idx + incr);
		tree_model.reload(par_sel);
		Tree_Task.expandPath(new TreePath(sel.getPath()));
		Tree_Task.setSelectionPath(new TreePath(sel.getPath()));
	}
	
    private void Button_TaskUpMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskUpMouseClicked
        move_task_up_down("up", -1);
    }//GEN-LAST:event_Button_TaskUpMouseClicked

    private void Button_TaskDownMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskDownMouseClicked
        move_task_up_down("down", +1);
    }//GEN-LAST:event_Button_TaskDownMouseClicked

	private void change_task_priority(String dir, int incr) {
		if (!tree_has_selection("A task must be selected in order to move it")) {
			return;
		}
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		if (sel.getLevel() < 0) { return; }
		if (sel.getLevel() <= 1) {
			issue_warning_msg("Can't move root node or nodes high/med/low");
			return;
		}
		if (sel.getLevel() > 2) {
			issue_warning_msg("Can't change a task's priority if it a subtask of another task");
			return;
		}
		
		String cur_prior = get_priority(sel);
		if (dir.equals("incr") && cur_prior.equals("high")) {
			log.warning("Can't increase priority of highest-priority task");
			return;
		}
		if (dir.equals("decr") && cur_prior.equals("low")) {
			log.warning("Can't decrease priority of lowest-priority task");
			return;
		}
		
		Task t = (Task) sel.getUserObject();
		TaskManager tm = TaskManager.get_instance();
		
		DefaultMutableTreeNode from_prior = null;
		DefaultMutableTreeNode to_prior = null;
		String verb = "";
		String new_prior = "??";
		
		if (cur_prior.equals("high")) {
			from_prior = high_prior_node;
			to_prior = med_prior_node;
			new_prior = "med";
			verb = "Decreased";
		}
		else if (cur_prior.equals("med")) {
			from_prior = med_prior_node;
			if (dir.equals("incr")) {
				to_prior = high_prior_node;
				new_prior = "high";
				verb = "Increased";
			}
			else if (dir.equals("decr")) {
				to_prior = low_prior_node;
				new_prior = "low";
				verb = "Decreased";
			}
		}
		else if (cur_prior.equals("low")) {
			from_prior = low_prior_node;
			to_prior = med_prior_node;
			new_prior = "medium";
			verb = "Increased";
		}
		else { return; }
		
		from_prior.remove(sel);
		to_prior.insert(sel, 0);
		
		if (cur_prior.equals("high"))     { tm.del_high_task(t.get_id()); }
		else if (cur_prior.equals("med")) { tm.del_med_task(t.get_id()); }
		else if (cur_prior.equals("low")) { tm.del_low_task(t.get_id()); }
		
		if (new_prior.equals("high"))     { tm.insert_high_task(0, t); }
		else if (new_prior.equals("med")) { tm.insert_med_task(0, t); }
		else if (new_prior.equals("low")) { tm.insert_low_task(0, t); }
		
		t.change_state(
			verb + " priority to " + new_prior + ".",
			TaskStateEnum.PriorityChanged
		);
		
		refresh_boxes_task(t);
		tree_model.reload(from_prior);
		tree_model.reload(to_prior);
		Tree_Task.expandPath(new TreePath(from_prior.getPath()));
		Tree_Task.expandPath(new TreePath(to_prior.getPath()));
		Tree_Task.expandPath(new TreePath(sel.getPath()));
	}
	
    private void Button_IncrPriorityMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_IncrPriorityMouseClicked
        change_task_priority("incr", -1);
    }//GEN-LAST:event_Button_IncrPriorityMouseClicked

    private void Button_DecrPriorityMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_DecrPriorityMouseClicked
        change_task_priority("decr", +1);
    }//GEN-LAST:event_Button_DecrPriorityMouseClicked

	// 'n' is the parent of task 't'
	private void task_to_node(DefaultMutableTreeNode n, Task t) {
		// make a new node, with associated task
		DefaultMutableTreeNode new_node = new DefaultMutableTreeNode(t);
		// insert node
		n.insert(new_node, n.getChildCount());
		// insert subtasks
		t.get_subtasks().forEach((st) -> { task_to_node(new_node, st); });
	}
	
    private void MenuItem_OpenFileMousePressed(MouseEvent evt) {//GEN-FIRST:event_MenuItem_OpenFileMousePressed
        log.info("Choosing file for opening...");
		
		JFileChooser fc = new JFileChooser();
		File file;
		int returnVal = fc.showOpenDialog(jPanel3);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            log.info("Open command cancelled by user");
			return;
        }
		file = fc.getSelectedFile();
		String filename = file.getAbsolutePath();
		
		log.info("Opening file '" + filename + "'");
		
		TaskManager tm = TaskManager.get_instance();
		tm.set_task_file(filename);
		if (!tm.read_tasks()) {
			issue_warning_msg("Could not open selected file '" + filename + "'");
			return;
		}
		Button_OverwriteTasks.setEnabled(true);
		
		// clear tree...
		high_prior_node.removeAllChildren();
		med_prior_node.removeAllChildren();
		low_prior_node.removeAllChildren();
		tree_model.reload();
		
		// fill tree...
		tm.get_high_prior_tasks().forEach((t) -> { task_to_node(high_prior_node, t); });
		tm.get_med_prior_tasks().forEach((t) -> { task_to_node(med_prior_node, t); });
		tm.get_low_prior_tasks().forEach((t) -> { task_to_node(low_prior_node, t); });
		tree_model.reload();
		set_tree_expanded_state(true);
    }//GEN-LAST:event_MenuItem_OpenFileMousePressed

    private void Button_SaveTasksAsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_SaveTasksAsMouseClicked
        log.info("Choosing file for saving...");
		
		JFileChooser fc = new JFileChooser();
		File file;
		int returnVal = fc.showSaveDialog(jPanel3);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            log.info("Save command cancelled by user");
			return;
        }
		file = fc.getSelectedFile();
		String filename = file.getAbsolutePath();
		Button_OverwriteTasks.setEnabled(true);
		
		log.info("Saving to file '" + filename + "'");
		
		TaskManager tm = TaskManager.get_instance();
		boolean do_backup = true;
		if (!tm.get_task_file().equals(filename)) {
			do_backup = false;
			tm.set_task_file(filename);
		}
		tm.write_tasks(do_backup);
    }//GEN-LAST:event_Button_SaveTasksAsMouseClicked

    private void Button_SaveTaskChangesMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_SaveTaskChangesMouseClicked
        if (!tree_has_selection("A task must be selected in order to edit its name and description")) {
			return;
		}
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		
		Task t = (Task) sel.getUserObject();
		t.set_name(TextBox_TaskName.getText());
		t.set_description(TextArea_TaskDescription.getText());
		t.change_state("Edited name and/or description.", TaskStateEnum.Edited);
		refresh_boxes_task(t);
    }//GEN-LAST:event_Button_SaveTaskChangesMouseClicked

	private void change_task_state(TaskStateEnum s, String custom_reason, boolean use_reason)
	{
		if (!tree_has_selection("A task must be selected in order to change its state")) {
			return;
		}
		DefaultMutableTreeNode sel
			= (DefaultMutableTreeNode) Tree_Task.getLastSelectedPathComponent();
		Task t = (Task) sel.getUserObject();
		String r = t.ask_change_state(s);
		if (!r.equals("")) {
			issue_error_msg("Can't change state of task (id: " + t.get_id() + ") due to: " + r);
			return;
		}
		String reason;
		if (use_reason) { reason = custom_reason; }
		else {
			reason = JOptionPane.showInputDialog(
				null, "Why do you want to change the task's state?", "Change a task's state",
				JOptionPane.PLAIN_MESSAGE // no icon
			);
		}
		t.change_state(reason, s);
		refresh_boxes_task(t);
		tree_model.reload(sel);
	}
	
    private void Button_TaskDoneMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskDoneMouseClicked
        change_task_state(TaskStateEnum.Done, "The task has been completed.", true);
    }//GEN-LAST:event_Button_TaskDoneMouseClicked

    private void Button_TaskWorkingMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskWorkingMouseClicked
        change_task_state(TaskStateEnum.Working, "Working on it.", true);
    }//GEN-LAST:event_Button_TaskWorkingMouseClicked

    private void Button_TaskHoldMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskHoldMouseClicked
        change_task_state(TaskStateEnum.PutOnHold, "", false);
    }//GEN-LAST:event_Button_TaskHoldMouseClicked

    private void Button_TaskOnRevisionMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskOnRevisionMouseClicked
        change_task_state(TaskStateEnum.OnRevision, "The task is being revised.", true);
    }//GEN-LAST:event_Button_TaskOnRevisionMouseClicked

    private void Button_TaskPendingRevisionMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskPendingRevisionMouseClicked
        change_task_state(TaskStateEnum.PendingRevision, "", false);
    }//GEN-LAST:event_Button_TaskPendingRevisionMouseClicked

    private void Button_TaskCancelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskCancelMouseClicked
        change_task_state(TaskStateEnum.Cancelled, "", false);
    }//GEN-LAST:event_Button_TaskCancelMouseClicked

    private void Button_TaskDeleteMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_TaskDeleteMouseClicked
        change_task_state(TaskStateEnum.Deleted, "", false);
    }//GEN-LAST:event_Button_TaskDeleteMouseClicked

    private void MenuItem_AboutMousePressed(MouseEvent evt) {//GEN-FIRST:event_MenuItem_AboutMousePressed
        JOptionPane.showMessageDialog(null,
			"Todo List Manager\n\nCopyright 2019\n\nBy: Lluís Alemany Puig"
		);
    }//GEN-LAST:event_MenuItem_AboutMousePressed

    private void Button_ExpandAllMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_ExpandAllMouseClicked
        set_tree_expanded_state(true);
    }//GEN-LAST:event_Button_ExpandAllMouseClicked

    private void Button_ContractAllMouseClicked(MouseEvent evt) {//GEN-FIRST:event_Button_ContractAllMouseClicked
        set_tree_expanded_state(false);
    }//GEN-LAST:event_Button_ContractAllMouseClicked

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainView().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton Button_Clear;
    private JButton Button_ContractAll;
    private JButton Button_DecrPriority;
    private JButton Button_ExpandAll;
    private JButton Button_IncrPriority;
    private JButton Button_NewTask;
    private JButton Button_OverwriteTasks;
    private JButton Button_RemoveTask;
    private JButton Button_SaveTaskChanges;
    private JButton Button_SaveTasksAs;
    private JButton Button_TaskCancel;
    private JButton Button_TaskDelete;
    private JButton Button_TaskDone;
    private JButton Button_TaskDown;
    private JButton Button_TaskHold;
    private JButton Button_TaskOnRevision;
    private JButton Button_TaskPendingRevision;
    private JButton Button_TaskUp;
    private JButton Button_TaskWorking;
    private JLabel Label_TaskID;
    private JLabel Label_TaskState;
    private JMenuItem MenuItem_About;
    private JMenuItem MenuItem_OpenFile;
    private JTextArea TextArea_TaskChanges;
    private JTextArea TextArea_TaskDescription;
    private JTextField TextBox_Error;
    private JTextField TextBox_TaskDate;
    private JTextField TextBox_TaskName;
    private JTree Tree_Task;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel6;
    private JMenu jMenu1;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel5;
    private JPanel jPanel7;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane6;
    private JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables

	private DefaultTreeModel tree_model;
	private DefaultMutableTreeNode high_prior_node;
	private DefaultMutableTreeNode med_prior_node;
	private DefaultMutableTreeNode low_prior_node;
	private Logger log;
}
